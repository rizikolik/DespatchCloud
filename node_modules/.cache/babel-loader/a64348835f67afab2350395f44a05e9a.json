{"ast":null,"code":"var _jsxFileName = \"/home/ynsture/Developments/despatch_cloud_test/src/components/Header/counter.js\";\nimport React from \"react\";\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hours: 0,\n      minutes: 3,\n      seconds: 0\n    };\n  }\n\n  componentDidMount() {\n    this.myInterval = setInterval(() => {\n      function counter() {\n        const countDownDate = new Date(\"May 5, 2020 15:00:00\").getTime();\n        const now = new Date().getTime();\n        const distance = countDownDate - now;\n        const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n        const hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n        const minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n        const seconds = Math.floor(distance % (1000 * 60) / 1000);\n        const count = `   ${days} + \"d \" + ${hours} + \"h \"  + ${minutes}+ \"m \" + ${seconds} + \"s \"`;\n        console.log(count);\n      }\n    }, 1000);\n  }\n\n  render() {\n    const {\n      hours,\n      minutes,\n      seconds\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    }, minutes === 0 && seconds === 0 ? /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    }, \"Busted!\") : /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    }, \"Time Remaining: \", minutes, \":\", seconds < 10 ? `0${seconds}` : seconds));\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/home/ynsture/Developments/despatch_cloud_test/src/components/Header/counter.js"],"names":["React","Counter","Component","constructor","props","state","hours","minutes","seconds","componentDidMount","myInterval","setInterval","counter","countDownDate","Date","getTime","now","distance","days","Math","floor","count","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAN,SAAsBD,KAAK,CAACE,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,CADI;AAEXC,MAAAA,OAAO,EAAE,CAFE;AAGXC,MAAAA,OAAO,EAAE;AAHE,KAAb;AAKD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL,GAAkBC,WAAW,CAAC,MAAM;AAClC,eAASC,OAAT,GAAmB;AACjB,cAAMC,aAAa,GAAG,IAAIC,IAAJ,CAAS,sBAAT,EAAiCC,OAAjC,EAAtB;AACA,cAAMC,GAAG,GAAG,IAAIF,IAAJ,GAAWC,OAAX,EAAZ;AACA,cAAME,QAAQ,GAAGJ,aAAa,GAAGG,GAAjC;AACA,cAAME,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAnB,CAAb;AACA,cAAMX,KAAK,GAAGa,IAAI,CAACC,KAAL,CACXH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAT,IAAsC,OAAO,EAAP,GAAY,EAAlD,CADY,CAAd;AAGA,cAAMV,OAAO,GAAGY,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAT,IAAiC,OAAO,EAAxC,CAAX,CAAhB;AACA,cAAMT,OAAO,GAAGW,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAX,CAAT,GAA2B,IAAtC,CAAhB;AACA,cAAMI,KAAK,GAAI,MAAKH,IAAK,aAAYZ,KAAM,cAAaC,OAAQ,YAAWC,OAAQ,SAAnF;AACAc,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KAd4B,EAc1B,IAd0B,CAA7B;AAeD;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAElB,MAAAA,KAAF;AAASC,MAAAA,OAAT;AAAkBC,MAAAA;AAAlB,QAA8B,KAAKH,KAAzC;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGE,OAAO,KAAK,CAAZ,IAAiBC,OAAO,KAAK,CAA7B,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADD,gBAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACmBD,OADnB,OAC6BC,OAAO,GAAG,EAAV,GAAgB,IAAGA,OAAQ,EAA3B,GAA+BA,OAD5D,CAJJ,CADF;AAWD;;AAxCmC;;AA0CtC,eAAeP,OAAf","sourcesContent":["import React from \"react\";\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hours: 0,\n      minutes: 3,\n      seconds: 0,\n    };\n  }\n  componentDidMount() {\n    this.myInterval = setInterval(() => {\n      function counter() {\n        const countDownDate = new Date(\"May 5, 2020 15:00:00\").getTime();\n        const now = new Date().getTime();\n        const distance = countDownDate - now;\n        const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n        const hours = Math.floor(\n          (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n        );\n        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n        const count = `   ${days} + \"d \" + ${hours} + \"h \"  + ${minutes}+ \"m \" + ${seconds} + \"s \"`;\n        console.log(count);\n      }\n    }, 1000);\n  }\n\n  render() {\n    const { hours, minutes, seconds } = this.state;\n    return (\n      <div>\n        {minutes === 0 && seconds === 0 ? (\n          <h1>Busted!</h1>\n        ) : (\n          <h1>\n            Time Remaining: {minutes}:{seconds < 10 ? `0${seconds}` : seconds}\n          </h1>\n        )}\n      </div>\n    );\n  }\n}\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}