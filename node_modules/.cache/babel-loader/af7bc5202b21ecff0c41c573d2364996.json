{"ast":null,"code":"var _jsxFileName = \"/home/ynsture/Developments/despatch_cloud_test/src/components/Header/counter.js\";\nimport React from \"react\";\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    };\n  }\n\n  componentDidMount() {\n    this.myInterval = setInterval(() => {\n      const countDownDate = new Date(\"May 5, 2020 15:00:00\").getTime();\n      const now = new Date().getTime();\n      const distance = countDownDate - now;\n      const day = Math.floor(distance / (1000 * 60 * 60 * 24));\n      const hour = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n      const minute = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n      const second = Math.floor(distance % (1000 * 60) / 1000);\n      const count = `   ${days} + \"d \" + ${hours} + \"h \"  + ${minutes}+ \"m \" + ${seconds} + \"s \"`;\n      this.setState(({\n        day,\n        hour,\n        minute,\n        second\n      }) => ({\n        days: day,\n        hours: hour,\n        minutes: minute,\n        seconds: second\n      }));\n    }, 1000);\n  }\n\n  render() {\n    const {\n      days,\n      hours,\n      minutes,\n      se\n    } = this.state;\n    console.log(this.state);\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    }, \"Time Remaining \", days);\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/home/ynsture/Developments/despatch_cloud_test/src/components/Header/counter.js"],"names":["React","Counter","Component","constructor","props","state","days","hours","minutes","seconds","componentDidMount","myInterval","setInterval","countDownDate","Date","getTime","now","distance","day","Math","floor","hour","minute","second","count","setState","render","se","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAN,SAAsBD,KAAK,CAACE,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,CADK;AAEXC,MAAAA,KAAK,EAAE,CAFI;AAGXC,MAAAA,OAAO,EAAE,CAHE;AAIXC,MAAAA,OAAO,EAAE;AAJE,KAAb;AAMD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL,GAAkBC,WAAW,CAAC,MAAM;AAClC,YAAMC,aAAa,GAAG,IAAIC,IAAJ,CAAS,sBAAT,EAAiCC,OAAjC,EAAtB;AACA,YAAMC,GAAG,GAAG,IAAIF,IAAJ,GAAWC,OAAX,EAAZ;AACA,YAAME,QAAQ,GAAGJ,aAAa,GAAGG,GAAjC;AACA,YAAME,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAnB,CAAZ;AACA,YAAMI,IAAI,GAAGF,IAAI,CAACC,KAAL,CACVH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAT,IAAsC,OAAO,EAAP,GAAY,EAAlD,CADW,CAAb;AAGA,YAAMK,MAAM,GAAGH,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAT,IAAiC,OAAO,EAAxC,CAAX,CAAf;AACA,YAAMM,MAAM,GAAGJ,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAX,CAAT,GAA2B,IAAtC,CAAf;AACA,YAAMO,KAAK,GAAI,MAAKlB,IAAK,aAAYC,KAAM,cAAaC,OAAQ,YAAWC,OAAQ,SAAnF;AACA,WAAKgB,QAAL,CAAc,CAAC;AAAEP,QAAAA,GAAF;AAAOG,QAAAA,IAAP;AAAaC,QAAAA,MAAb;AAAqBC,QAAAA;AAArB,OAAD,MAAoC;AAChDjB,QAAAA,IAAI,EAAEY,GAD0C;AAEhDX,QAAAA,KAAK,EAAEc,IAFyC;AAGhDb,QAAAA,OAAO,EAAEc,MAHuC;AAIhDb,QAAAA,OAAO,EAAEc;AAJuC,OAApC,CAAd;AAMD,KAjB4B,EAiB1B,IAjB0B,CAA7B;AAkBD;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEpB,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,OAAf;AAAwBmB,MAAAA;AAAxB,QAA+B,KAAKtB,KAA1C;AACAuB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxB,KAAjB;AAEA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAoBC,IAApB,CAAP;AACD;;AApCmC;;AAsCtC,eAAeL,OAAf","sourcesContent":["import React from \"react\";\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n    };\n  }\n  componentDidMount() {\n    this.myInterval = setInterval(() => {\n      const countDownDate = new Date(\"May 5, 2020 15:00:00\").getTime();\n      const now = new Date().getTime();\n      const distance = countDownDate - now;\n      const day = Math.floor(distance / (1000 * 60 * 60 * 24));\n      const hour = Math.floor(\n        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      const minute = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      const second = Math.floor((distance % (1000 * 60)) / 1000);\n      const count = `   ${days} + \"d \" + ${hours} + \"h \"  + ${minutes}+ \"m \" + ${seconds} + \"s \"`;\n      this.setState(({ day, hour, minute, second }) => ({\n        days: day,\n        hours: hour,\n        minutes: minute,\n        seconds: second,\n      }));\n    }, 1000);\n  }\n\n  render() {\n    const { days, hours, minutes, se } = this.state;\n    console.log(this.state);\n\n    return <h1>Time Remaining {days}</h1>;\n  }\n}\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}